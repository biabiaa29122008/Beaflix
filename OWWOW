<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>GitHub Explorer</title>
  <link rel="stylesheet" href="style.css">
</head>
<body>
  <header>
    <h1>GitHub Explorer</h1>
  </header>

  <main>
    <div id="repo-list" class="repo-list">
      <p>Carregando repositórios...</p>
    </div>
    <div class="pagination">
      <button id="prev-btn" disabled>Anterior</button>
      <span id="page-info">Página 1</span>
      <button id="next-btn">Próximo</button>
    </div>
  </main>

  <script src="script.js"></script>
</body>
</html>
body {
  font-family: Arial, sans-serif;
  background-color: #1e1e1e;
  color: #f1f1f1;
  margin: 0;
  padding: 0;
  text-align: center;
}

header {
  background-color: #282c34;
  padding: 20px;
}

h1 {
  margin: 0;
  font-size: 2rem;
}

main {
  padding: 20px;
}

.repo-list {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.repo {
  background-color: #333;
  width: 80%;
  margin: 10px 0;
  padding: 10px;
  border-radius: 5px;
  text-align: left;
}

.repo h2 {
  margin: 0 0 10px;
  font-size: 1.5rem;
}

.repo p {
  margin: 0;
}

.pagination {
  margin-top: 20px;
}

button {
  background-color: #555;
  color: #fff;
  border: none;
  padding: 10px 20px;
  margin: 5px;
  cursor: pointer;
  border-radius: 5px;
}

button:disabled {
  background-color: #777;
  cursor: not-allowed;
}
let currentPage = 1;
const repoList = document.getElementById('repo-list');
const prevBtn = document.getElementById('prev-btn');
const nextBtn = document.getElementById('next-btn');
const pageInfo = document.getElementById('page-info');

async function fetchRepos(page) {
  const url = `https://api.github.com/search/repositories?q=stars:>1000&sort=stars&order=desc&page=${page}&per_page=10`;
  try {
    const response = await fetch(url);
    const data = await response.json();
    return data.items;
  } catch (error) {
    console.error('Erro ao buscar repositórios:', error);
    return [];
  }
}

function renderRepos(repos) {
  repoList.innerHTML = '';
  if (repos.length === 0) {
    repoList.innerHTML = '<p>Nenhum repositório encontrado.</p>';
    return;
  }

  repos.forEach(repo => {
    const repoElement = document.createElement('div');
    repoElement.classList.add('repo');
    repoElement.innerHTML = `
      <h2>${repo.name}</h2>
      <p>${repo.description || 'Sem descrição'}</p>
      <p><strong>🌟 Estrelas:</strong> ${repo.stargazers_count}</p>
      <p><a href="${repo.html_url}" target="_blank">Ver no GitHub</a></p>
    `;
    repoList.appendChild(repoElement);
  });
}

function updatePagination() {
  pageInfo.textContent = `Página ${currentPage}`;
  prevBtn.disabled = currentPage === 1;
}

async function loadRepos(page) {
  const repos = await fetchRepos(page);
  renderRepos(repos);
  updatePagination();
}

prevBtn.addEventListener('click', () => {
  if (currentPage > 1) {
    currentPage--;
    loadRepos(currentPage);
  }
});

nextBtn.addEventListener('click', () => {
  currentPage++;
  loadRepos(currentPage);
});

// Inicializa a página com a primeira página de repositórios
loadRepos(currentPage);
